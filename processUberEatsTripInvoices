#!/bin/ksh

Version=1.2

#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
#
# This software is provided "as is" without any warranty of any kind.
#
# Before using this script, these packages must be installed:
#
#    ksh    (yum install ksh)
#    python (yum install python)
#    PyPDF2 (yum install PyPDF2)
#
#
# --------------------------------------------------------------------
# Version history:
#   v1.0  Mar 16, 2021  -initial release
#   v1.1  Mar 23, 2021  -add invoice date to report2 (CSV file)
#                       -don't crash if tax point date is missing
#   v1.2  Mar 25, 2021  -add more background info to the comments to
#                        help you decide whether to use this script
# --------------------------------------------------------------------
#
# ----------------------------------------
# Author: Larry Anta (larryanta@gmail.com)
# ----------------------------------------
#
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

print $0 Version: $Version

# A tax year must be supplied on the command line.
if [[ $# != 1 ]]
then
  print Usage: $0 taxyear
  exit 1
fi
(( TaxYear=$1 ))


#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
#
# You must edit the values of PyPDF2location and tripInvoices below.  PyPDF2location is
# where you installed the PyPDF2 package, while tripInvoices is where this script will
# search for Uber Eats trip invoices.
#
#
eval PyPDF2location="~jdoe/PyPDF2-1.26.0"
eval tripInvoices="~jdoe/UberEATS/TripInvoicePDFs/invoice-ALKUSXZA-03-$TaxYear-*.pdf"
#
#
# You shouldn't have to change any lines below this one.
#
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
#
# Backgound
# =========
#
# As of March, 2021, Intuit, the makers of TurboTax, are of the opinion that food delivery
# drivers do not remit HST to the CRA, but they are eligible to recover HST they have paid
# on their own expenses by claiming Input Tax Credits (ITCs).  That's my reading of their
# excellent article "GST/HST Reporting Requirements For Food Delivery Services" by Hebatollah
# El-Kady which they posted on December 1, 2020.
#
# But Uber appears to be giving restaurants the GST registration numbers of its drivers.
# Worse, they are charging the restaurant HST (at 13% here in Ontario) and stating right in
# the invoice that the invoice was created on behalf of the driver.  The invoices shows
# the DRIVER's name and the DRIVER's GST registration number.
#
# You can find these trip invoices by logging in to your account at drivers.uber.com and
# clicking on the INVOICES link.
#
# Furthermore, when you exclude the tip that the end-customer might have given you, the gross
# amount of the invoice matches the amount you were paid by Uber.
#
# In other words, if you follow the HST, it was charged at 13% (in Ontario) by Uber, paid
# to Uber by the restaurant, and given to the driver by Uber.  In my opinion, that HST
# must now be remitted to the CRA by the DRIVER.
#
# I absolutely trust the advice of Intuit; I believe they describe how things should be
# with drivers and HST but it seems to me that Uber is not following these rules.
#
# Since this has not been resolved by the CRA, it's unclear what you should do since even
# HST that is collected in error must be remitted to the CRA.
#
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
#
# What this script does
# =====================
#
# Each trip invoice is a PDF file and a driver can have hundreds or even thousands of them
# in a given year.  Uber Eats does not add up the amounts shown in all these trip invoices.
# If you have read the above background information and you choose to remit the HST collected
# on your trip invoices, this script can help by extracting the relevant fields directly from
# the PDF files themselves and adding up the dollar amounts that you will need when filing
# your GST/HST statement.
#
# The tax year is embedded into each trip invoice's file name.  For example, the trip invoice
# named invoice-ALKUSXZA-03-2021-0000245.pdf was the 245th invoice for tax year 2021.
#
# Unfortunately, you have to download each trip invoice pdf file manually and store them
# somewhere on your Linux box.  If you do it daily or weekly it's not so bad.
#
# The following reports are created and saved on disk for you.  The third report is displayed
# on your screen and should help you with lines 101 and 103 of your GST/HST return.
#
#    report1:  the raw text contained in all the PDF files for the given tax year
#    report2:  selected fields from the same PDF files (in CSV format)
#    report3:  grand totals of all the trip invoices (and of just those with HST applied)
#
# Report3 has separate totals (with/without HST) in case you registered for GST/HST in that
# tax year.
#
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@




# Some essential variables we'll need:
todaysDate=`date`
report1Name="report.TripInvoices.TY$TaxYear.rawText"
report2Name="report.TripInvoices.TY$TaxYear.csv"
report3Name="report.TripInvoices.TY$TaxYear.summary"


# If the '*' is still present in the trip invoice search string, then
# there are no invoices for that year and we can go no further.
echo $tripInvoices | grep '*' > /dev/null 2>&1
if [[ $? == 0 ]]
then
  print No trip invoices found for tax year $TaxYear
  exit 2
fi


# Silently delete report files from previous runs.
rm -f $report1Name
rm -f $report2Name
rm -f $report3Name


# Create report1 showing the raw text from all the invoices for the given tax year.
print Generating report1...
echo "Raw text of all trip invoices for tax year $TaxYear        Report date: $todaysDate"              >> $report1Name
echo "================================================================================================" >> $report1Name
invoiceCount=0
for x in $tripInvoices
do
  # Extract the raw text from the PDF file.
  python <<EOF
# This Python program, adapted from https://automatetheboringstuff.com/chapter13,
# extracts the text from the first page of a PDF file.
import sys
sys.path.append("$PyPDF2location")
import PyPDF2
reload(sys)
sys.setdefaultencoding('utf8')
pdfFileObj = open("$x", 'rb')
pdfReader = PyPDF2.PdfFileReader(pdfFileObj)
pdfReader.numPages
pageObj = pdfReader.getPage(0)
print pageObj.extractText()
EOF
  echo "================================================================================================"
  (( invoiceCount+=1 ))
  print -n "$invoiceCount ">$(tty)
done >> $report1Name
echo ' '


# Create report2, a CSV file with selected fields from the trip invoices.
# (Keep running totals of some of those fields for later use in report3.)
print Generating report2...
echo "InvoiceNumber,InvoiceDate,TaxPointDate,Restaurant,GSTNumber,TotalNet,TotalHST,GrossAmt" >> $report2Name
grandTotalNetAll=0.00
grandTotalNetOnlyHstInvoices=0.00
grandTotalHST=0.00
grandTotalGrossAll=0.00
grandTotalGrossOnlyHstInvoices=0.00
invoiceCount=0
invoiceCountHST=0
for x in $tripInvoices
do
  # Extract the raw text from the PDF file.
  python <<EOF >| work1
# This Python program, adapted from https://automatetheboringstuff.com/chapter13,
# extracts the text from the first page of a PDF file.
import sys
sys.path.append("$PyPDF2location")
import PyPDF2
reload(sys)
sys.setdefaultencoding('utf8')
pdfFileObj = open("$x", 'rb')
pdfReader = PyPDF2.PdfFileReader(pdfFileObj)
pdfReader.numPages
pageObj = pdfReader.getPage(0)
print pageObj.extractText()
EOF
  # Grab the invoice number.
  set $(grep '^Invoice Number: ' work1)
  InvoiceNumber=$3

  # Grab the invoice date
  set $(grep '^Invoice Date: ' work1)
  InvoiceDate="$3 $4 $5"

  # The tax point date is assumed to be the line immediately before
  # the line that starts with the text 'Delivery service'.  The
  # date is in three separate tokens, eg. 'Jan' '22,' '2021'.
  #
  # Note: Sometime around March 15, 2021, I started to see trip invoices
  #       that do not have a tax point date.  Those same invoices do not
  #       have a line that starts with 'Delivery service' either.  So if
  #       we don't see 'Delivery service' at the beginning of a line
  #       anywhere on the invoice, then I'm setting the tax point date
  #       to 'notSpecified'.
  TaxPointDate="notSpecified"
  grep -B1 '^Delivery service' work1 > /dev/null 2>&1
  rc=$?
  if (( rc==0 ))
  then
    set $(grep -B1 '^Delivery service' work1)
    TaxPointDate="$1 $2 $3"
  fi

  # The restaurant name is assumed to be the third line.  Since the number
  # of words in a restaurant's name is unpredictable, just concatenate
  # words together until a word of length zero is encountered.  If a
  # restaurant name is more than 8 words long, it's truncated to 8 words.
  # (We could short circuit the 'if' statements below but it's hardly
  # worth it and would complicate the code.)
  set $(head -3 work1 | tail -1)
  Restaurant=$1
  if (( ${#2} != 0 )); then Restaurant="$Restaurant $2"; fi
  if (( ${#3} != 0 )); then Restaurant="$Restaurant $3"; fi
  if (( ${#4} != 0 )); then Restaurant="$Restaurant $4"; fi
  if (( ${#5} != 0 )); then Restaurant="$Restaurant $5"; fi
  if (( ${#6} != 0 )); then Restaurant="$Restaurant $6"; fi
  if (( ${#7} != 0 )); then Restaurant="$Restaurant $7"; fi
  if (( ${#8} != 0 )); then Restaurant="$Restaurant $8"; fi

  # The restaurant's GST registration number is on a line
  # that begins with the text 'GST Registration Number:'.
  set $(grep '^GST Registration Number:' work1)
  GSTNumber=$4

  # Every invoice has a net amount.  It's the value found on the line
  # following the line that starts with the text 'Total Net'.
  set $(grep -A1 '^Total Net' work1 | tail -1)
  TotalNet=$1
  (( grandTotalNetAll+=TotalNet ))

  # Every invoice has a gross amount.  It's the value on the line
  # following the line that starts with the text 'Gross Amount'.
  set $(grep -A1 '^Gross Amount' work1 | tail -1)
  GrossAmt=$1
  (( grandTotalGrossAll+=GrossAmt ))

  # Only trip invoices that contain a line that starts with the
  # text 'Total HST Amount' have had HST added to the bill.  In
  # that case the HST amount is on the line following that one.
  # For invoices that don't contain that text, we set the HST
  # amount to 0.00.
  TotalHST=0.00
  grep  '^Total HST Amount' work1 > /dev/null 2>&1
  rc=$?
  if (( rc == 0 ))
  then
    set $(grep -A1 '^Total HST Amount' work1 | tail -1)
    TotalHST=$1
    (( invoiceCountHST+=1 ))
    (( grandTotalNetOnlyHstInvoices+=TotalNet ))
    (( grandTotalGrossOnlyHstInvoices+=GrossAmt ))
  fi

  # We have everything we need for the next row of the CSV file, but the invoice date and tax
  # point date each have a comma in them.  The restaurant name can conceivably contain commas
  # too.  Enclose all three of these fields in double quotes so that the row will conform to
  # CSV-file rules.  Write out this new row.
  echo "$InvoiceNumber,\"$InvoiceDate\",\"$TaxPointDate\",\"$Restaurant\",$GSTNumber,$TotalNet,$TotalHST,$GrossAmt" >> $report2Name
  (( invoiceCount+=1 ))
  (( grandTotalHST+=TotalHST ))
  print -n "$invoiceCount "
done
echo ' '
rm -f work1
set +x


# Create a summary report (report3).
print 'Generating report3...\n'
echo "Trip invoice summary for tax year $TaxYear        Report date: $todaysDate"              >> $report3Name
echo "=======================================================================================" >> $report3Name
if (( invoiceCount == 1 ))
then
  print "\n$invoiceCount trip invoice was found for this tax year."                            >> $report3Name
else
  print "\n$invoiceCount trip invoices were found for this tax year."                          >> $report3Name
fi
print "$invoiceCountHST of them had HST applied.\n"                                            >> $report3Name

print "Totals for ALL trip invoices"                                                           >> $report3Name
print "============================"                                                           >> $report3Name
print -n "     Net: $"                                                                         >> $report3Name
echo $grandTotalNetAll   | awk '{printf "%10.2f\n", $1}'                                       >> $report3Name
print -n "Plus HST: $"                                                                         >> $report3Name
echo $grandTotalHST   | awk '{printf "%10.2f\n", $1}'                                          >> $report3Name
print "          ==========="                                                                  >> $report3Name
print -n "   Total: $"                                                                         >> $report3Name
echo $grandTotalGrossAll | awk '{printf "%10.2f\n", $1}'                                       >> $report3Name

print "\nTotals for ONLY the trip invoices that have HST applied"                              >> $report3Name
print "======================================================="                                >> $report3Name
print -n "     Net: $"                                                                         >> $report3Name
echo $grandTotalNetOnlyHstInvoices   | awk '{printf "%10.2f\n", $1}'                           >> $report3Name
print -n "Plus HST: $"                                                                         >> $report3Name
echo $grandTotalHST   | awk '{printf "%10.2f\n", $1}'                                          >> $report3Name
print "          ==========="                                                                  >> $report3Name
print -n "   Total: $"                                                                         >> $report3Name
echo $grandTotalGrossOnlyHstInvoices | awk '{printf "%10.2f\n", $1}'                           >> $report3Name


# Display report3 on the screen.
cat $report3Name


exit 0
