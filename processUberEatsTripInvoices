#!/bin/ksh

Version=1.5

#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
#
# This software is provided "as is" without any warranty of any kind.
#
# Before using this script, these packages must be installed:
#
#    ksh    (yum install ksh)
#    python (yum install python)
#    PyPDF2 (yum install PyPDF2)
#
#
# -----------------------------------------------------------------------------------
# Version history:
#   v1.0  Mar 16, 2021  -initial release
#   v1.1  Mar 23, 2021  -add invoice date to report2 (CSV file)
#                       -don't crash if tax point date is missing
#   v1.2  Mar 25, 2021  -add more background info to the comments to
#                        help you decide whether to use this script
#   v1.3  Apr  4, 2021  -speed up the creation of report2 (CSV file) substantially
#   v1.4  Apr 14, 2021  -modify tripInvoices expression
#   v1.5  Apr 23, 2021  -modify tripInvoices expression
# -----------------------------------------------------------------------------------
#
# ----------------------------------------
# Author: Larry Anta (larryanta@gmail.com)
# ----------------------------------------
#
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

print $0 Version: $Version

# A tax year must be supplied on the command line.
if [[ $# != 1 ]]
then
  print Usage: $0 taxyear
  exit 1
fi
(( TaxYear=$1 ))


#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
#
# You must edit the values of PyPDF2location and tripInvoices below.  PyPDF2location is
# where you installed the PyPDF2 package, while tripInvoices is where this script will
# search for Uber Eats trip invoices.  Replace the Xs with your own Uber-provided invoice
# name string.
#
#
eval PyPDF2location="~jdoe/PyPDF2-1.26.0"
eval tripInvoices="~jdoe/UberEATS/TripInvoicePDFs/invoice-XXXXXXXX-03-$TaxYear-*.pdf"
#
#
# This script compiles the two C programs it needs (rpt2pgm.c and rpt3pgm.c), or you
# can compile them yourself if you wish.
#
#
# You shouldn't have to change any lines below this one.  Nor should you have to
# change anything in the C programs.
#
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
#
# Backgound
# =========
#
# As of March, 2021, Intuit, the makers of TurboTax, are of the opinion that food delivery
# drivers do not remit HST to the CRA, but they are eligible to recover HST they have paid
# on their own expenses by claiming Input Tax Credits (ITCs).  That's my reading of their
# excellent article "GST/HST Reporting Requirements For Food Delivery Services" by Hebatollah
# El-Kady which they posted on December 1, 2020.
#
# But Uber appears to be giving restaurants the GST registration numbers of its drivers.
# Worse, they are charging the restaurant HST (at 13% here in Ontario) and stating right in
# the invoice that the invoice was created on behalf of the driver.  The invoices show
# the DRIVER's name and the DRIVER's GST registration number.
#
# You can find these trip invoices by logging in to your account at drivers.uber.com and
# clicking on the INVOICES link.
#
# When you exclude the tip that the end-customer might have given you, the gross amount
# of the invoice matches the amount you were paid by Uber.
#
# In other words, the HST was charged at 13% (in Ontario) by Uber, paid to Uber by the
# restaurant, and given to the driver by Uber.  In my opinion, that HST must now be
# remitted to the CRA by the DRIVER.
#
# I absolutely trust the advice of Intuit; I believe they describe how things should be
# with drivers and HST but it seems to me that Uber is not following these rules.
#
# Since this has not been resolved by the CRA, it's unclear what you should do since even
# HST that is collected in error must be remitted to the CRA.
#
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
#
# What this script does
# =====================
#
# Each trip invoice is a PDF file and a driver can have hundreds or even thousands of them
# in a given year.  Uber Eats does not add up the amounts shown in all these trip invoices.
# If you have read the above background information and you choose to remit the HST collected
# on your trip invoices, this script can help by extracting the relevant fields directly from
# the PDF files themselves and adding up the dollar amounts that you will need when filing
# your GST/HST statement.
#
# The tax year is embedded into each trip invoice's file name.  For example, the trip invoice
# named invoice-XXXXXXXX-03-2021-0000245.pdf was the 245th invoice for tax year 2021.
#
# Unfortunately, you have to download each trip invoice pdf file manually and store them
# somewhere on your Linux box.  If you do it daily or weekly it's not so bad.
#
# The following reports are created and saved on disk for you.  The third report is also
# displayed on your screen and should help you with lines 101 and 103 of your GST/HST
# return.
#
#    report1:  the raw text contained in all the PDF files for the given tax year with
#              each invoice separated from the next with a row of equal signs
#    report2:  selected fields from the same PDF files (in CSV format)
#    report3:  grand totals of all the trip invoices (and of just those with HST applied)
#
# Report3 has separate totals (with/without HST) in case you registered for GST/HST in that
# tax year.
#
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@




# Some essential variables we'll need:
todaysDate=`date`
report1Name="report.TripInvoices.TY$TaxYear.rawText"
report2Name="report.TripInvoices.TY$TaxYear.csv"
report3Name="report.TripInvoices.TY$TaxYear.summary"


# If the '*' is still present in the trip invoice search string, then
# there are no invoices for that year and we can go no further.
echo $tripInvoices | grep '*' > /dev/null 2>&1
if [[ $? == 0 ]]
then
  print No trip invoices found for tax year $TaxYear
  exit 2
fi


# Report1 is created by this script.  To increase speed, report2 and
# report3 are created by invoking C programs:
#
#   Source File  Language  Binary executable
#   ===========  ========  =================
#    rpt2pgm.c       C         rpt2pgm
#    rpt3pgm.c       C         rpt3pgm


# Make sure binary executable rpt2pgm is ready to run.  Compile it if necessary.
if [[ ! -x rpt2pgm ]] then;
  if [[ ! -s rpt2pgm.c ]] then;
    print "Need to compile C program rpt2pgm.c but can't find it.  Aborting."
    exit 3
  else
    print "Compiling rpt2pgm.c..."
    print "cc -o rpt2pgm rpt2pgm.c"
    cc -o rpt2pgm rpt2pgm.c
    if [[ ! -x rpt2pgm ]] then;
      print "Compilation of rpt2pgm.c must have failed.  Aborting."
      exit 4
    fi
  fi
fi


# Repeat for rpt3pgm.
if [[ ! -x rpt3pgm ]] then;
  if [[ ! -s rpt3pgm.c ]] then;
    print "Need to compile C program rpt3pgm.c but can't find it.  Aborting."
    exit 5
  else
    print "Compiling rpt3pgm.c..."
    print "cc -o rpt3pgm rpt3pgm.c"
    cc -o rpt3pgm rpt3pgm.c
    if [[ ! -x rpt3pgm ]] then;
      print "Compilation of rpt3pgm.c must have failed.  Aborting."
      exit 6
    fi
  fi
fi


# We're ready to rock.  Silently delete report files from previous runs.
rm -f $report1Name
rm -f $report2Name
rm -f $report3Name


# Create report1 showing the raw text from all the invoices for the given tax year.
# Separate the invoices from each other with a row of equal signs.
print Generating report1...
exec 4> $report1Name
echo "Raw text of all trip invoices for tax year $TaxYear        Report date: $todaysDate"              >&4
echo "================================================================================================" >&4
invoiceCount=0
for x in $tripInvoices
do
  # Extract the raw text from the PDF file.
  python <<EOF
# This Python program, adapted from https://automatetheboringstuff.com/chapter13,
# extracts the text from the first page of a PDF file.
import sys
sys.path.append("$PyPDF2location")
import PyPDF2
reload(sys)
sys.setdefaultencoding('utf8')
pdfFileObj = open("$x", 'rb')
pdfReader = PyPDF2.PdfFileReader(pdfFileObj)
pdfReader.numPages
pageObj = pdfReader.getPage(0)
print pageObj.extractText()
EOF
  echo "================================================================================================"
  (( invoiceCount+=1 ))
  print -n "$invoiceCount ">$(tty)
done >&4
exec 4>&-  # Explicity close report1.
echo ' '


# Create report2, a CSV file with selected fields from the trip invoices.
./rpt2pgm $report1Name $report2Name
rc=$?
if ((rc!=0)) then;
  print "Error creating report2.  (RC:$rc)  Aborting."
  exit 7
fi

# Create a summary report (report3).
./rpt3pgm $TaxYear "'$todaysDate'" $report2Name $report3Name
rc=$?
if ((rc!=0)) then;
  print "Error creating report3.  (RC:$rc)  Aborting."
  exit 8
fi


# Display report3 on the screen.
cat $report3Name


exit 0
