#!/bin/ksh

Version=1.6

#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
#
#   processUberEatsTripInvoices   Extract dollar amounts from UberEATS pdf trip invoices
#   Copyright (C) 2021  Larry Anta
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

x=$0
print "${x##*/} v$Version"

# A tax year must be supplied on the command line.
if [[ $# != 1 ]]; then
  print Usage: $0 taxyear
  exit 1
fi
(( TaxYear=$1 ))


#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
#
# You must edit the tripInvoices location below.  It's where this script will search for
# Uber Eats trip invoices (PDF files).  Also, replace the Xs with your own Uber-provided
# invoice name string.
#
#
eval tripInvoices="~jdoe/UberEATS/TripInvoicePDFs/invoice-XXXXXXXX-03-$TaxYear-*.pdf"
#
#
# This script compiles the three C programs it needs (rpt1pgm.c, rpt2pgm.c and rpt3pgm.c),
# or you can compile them yourself if you wish.
#
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@










#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
#
# You shouldn't have to change any lines below this one.  Nor should you have to
# change anything in the C programs.
#
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


# Some essential variables we'll need:
todaysDate=`date`
report1Name="report.TripInvoices.TY$TaxYear.rawText"
report2Name="report.TripInvoices.TY$TaxYear.csv"
report3Name="report.TripInvoices.TY$TaxYear.summary"


# If the '*' is still present in the trip invoice search string, then
# there are no invoices for that year and we can go no further.
echo $tripInvoices | grep '*' > /dev/null 2>&1
if [[ $? == 0 ]]; then
  print No trip invoices found for tax year $TaxYear
  exit 2
fi


# The three reports are created by these C programs:
#
#   Source File  Binary executable
#   ===========  =================
#    rpt1pgm.c       rpt1pgm
#    rpt2pgm.c       rpt2pgm
#    rpt3pgm.c       rpt3pgm


# If binary executable rpt1pgm does not already exist, we need to create it from
# source file rpt1pgm.c.  But rpt1pgm.c needs header file zlib.h which may or
# may not be present on your system.  (The zlib.h header file is supplied by
# package zlib-devel.)
#
# Ideally we would check whether /usr/include/zlib.h exists but we can't assume
# that header files are stored in /usr/include on all systems.  If we can compile
# tiny test program checkForzlib.c, then zlib.h is already present and we're good
# to go.
#
# Otherwise we could try using our own supplied header file, _zlib.h, by renaming
# it to zlib.h.
if [[ ! -x rpt1pgm ]]; then
  gcc -E checkForzlibh.c >/dev/null 2>&1
  if [[ $? != 0 ]]; then
    mv _zlib.h zlib.h
    print "\n=========================================================="
    print "Couldn't find a zlib.h header file on your system."
    print "Attempting to use one supplied with this product."
    print " "
    print "If errors occur, the following is recommended:"
    print "  1. rm rpt1pgm"
    print "  2. mv zlib.h _zlib.h"
    print "  3. install package zlib-devel using your package manager"
    print "  4. rerun this script"
    print "==========================================================\n"
  fi
fi


# Make sure binary executable rpt1pgm is ready to run.  Compile it if necessary.
if [[ ! -x rpt1pgm ]]; then
  if [[ ! -s rpt1pgm.c ]]; then
    print "Need to compile C program rpt1pgm.c but can't find it.  Aborting."
    exit 3
  else
    print "Compiling rpt1pgm.c..."
    print "gcc -lz -o rpt1pgm rpt1pgm.c"
    gcc -lz -o rpt1pgm rpt1pgm.c
    if [[ ! -x rpt1pgm ]]; then
      print "Compilation of rpt1pgm.c must have failed.  Aborting."
      exit 4
    fi
  fi
fi


# Same for rpt2pgm...
if [[ ! -x rpt2pgm ]]; then
  if [[ ! -s rpt2pgm.c ]]; then
    print "Need to compile C program rpt2pgm.c but can't find it.  Aborting."
    exit 5
  else
    print "Compiling rpt2pgm.c..."
    print "gcc -o rpt2pgm rpt2pgm.c"
    gcc -o rpt2pgm rpt2pgm.c
    if [[ ! -x rpt2pgm ]]; then
      print "Compilation of rpt2pgm.c must have failed.  Aborting."
      exit 6
    fi
  fi
fi


# ...and rpt3pgm.
if [[ ! -x rpt3pgm ]]; then
  if [[ ! -s rpt3pgm.c ]]; then
    print "Need to compile C program rpt3pgm.c but can't find it.  Aborting."
    exit 7
  else
    print "Compiling rpt3pgm.c..."
    print "gcc -o rpt3pgm rpt3pgm.c"
    gcc -o rpt3pgm rpt3pgm.c
    if [[ ! -x rpt3pgm ]]; then
      print "Compilation of rpt3pgm.c must have failed.  Aborting."
      exit 8
    fi
  fi
fi


# We're ready to rock.  Silently delete report files from previous runs.
rm -f $report1Name
rm -f $report2Name
rm -f $report3Name


# Create report1 showing the raw text from all the invoices for the given tax year.
print Generating report1...
# Create the heading first.
exec 4> $report1Name
echo "Raw text of all trip invoices for tax year $TaxYear        Report date: $todaysDate"              >&4
echo "================================================================================================" >&4
exec 4>&-  # Explicitly close report1.
# Then append all the text from all the invoices.
invoiceCount=0
for x in $tripInvoices
do
  ./rpt1pgm $x $report1Name
  rc=$?
  if ((rc!=0)); then
    print "Error adding to report1.  (RC:$rc)  Aborting."
    exit 9
  fi
  (( invoiceCount+=1 ))
  print -n "$invoiceCount "
done
echo ' '


# Create report2, a CSV file with selected fields from the trip invoices.
./rpt2pgm $report1Name $report2Name
rc=$?
if ((rc!=0)); then
  print "Error creating report2.  (RC:$rc)  Aborting."
  exit 10
fi

# Create a summary report (report3).
./rpt3pgm $TaxYear "'$todaysDate'" $report2Name $report3Name
rc=$?
if ((rc!=0)); then
  print "Error creating report3.  (RC:$rc)  Aborting."
  exit 11
fi


# Display report3 on the screen.
cat $report3Name


exit 0
