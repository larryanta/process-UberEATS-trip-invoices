#!/bin/ksh
Version=1.5

#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
#
#   processUberEatsTripInvoices   Extract dollar amounts from UberEATS pdf trip invoices
#   Copyright (C) 2021  Larry Anta
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

print $0 Version: $Version

# A tax year must be supplied on the command line.
if [[ $# != 1 ]]
then
  print Usage: $0 taxyear
  exit 1
fi
(( TaxYear=$1 ))


#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
#
# You must edit the values of PyPDF2location and tripInvoices below.  PyPDF2location is
# where you installed the PyPDF2 package, while tripInvoices is where this script will
# search for Uber Eats trip invoices.  Replace the Xs with your own Uber-provided invoice
# name string.
#
#
eval PyPDF2location="~jdoe/PyPDF2-1.26.0"
eval tripInvoices="~jdoe/UberEATS/TripInvoicePDFs/invoice-XXXXXXXX-03-$TaxYear-*.pdf"
#
#
# This script compiles the two C programs it needs (rpt2pgm.c and rpt3pgm.c), or you
# can compile them yourself if you wish.
#
#
# You shouldn't have to change any lines below this one.  Nor should you have to
# change anything in the C programs.
#
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


# Some essential variables we'll need:
todaysDate=`date`
report1Name="report.TripInvoices.TY$TaxYear.rawText"
report2Name="report.TripInvoices.TY$TaxYear.csv"
report3Name="report.TripInvoices.TY$TaxYear.summary"


# If the '*' is still present in the trip invoice search string, then
# there are no invoices for that year and we can go no further.
echo $tripInvoices | grep '*' > /dev/null 2>&1
if [[ $? == 0 ]]
then
  print No trip invoices found for tax year $TaxYear
  exit 2
fi


# Report1 is created by this script.  To increase speed, report2 and
# report3 are created by invoking C programs:
#
#   Source File  Language  Binary executable
#   ===========  ========  =================
#    rpt2pgm.c       C         rpt2pgm
#    rpt3pgm.c       C         rpt3pgm


# Make sure binary executable rpt2pgm is ready to run.  Compile it if necessary.
if [[ ! -x rpt2pgm ]] then;
  if [[ ! -s rpt2pgm.c ]] then;
    print "Need to compile C program rpt2pgm.c but can't find it.  Aborting."
    exit 3
  else
    print "Compiling rpt2pgm.c..."
    print "cc -o rpt2pgm rpt2pgm.c"
    cc -o rpt2pgm rpt2pgm.c
    if [[ ! -x rpt2pgm ]] then;
      print "Compilation of rpt2pgm.c must have failed.  Aborting."
      exit 4
    fi
  fi
fi


# Same for rpt3pgm.
if [[ ! -x rpt3pgm ]] then;
  if [[ ! -s rpt3pgm.c ]] then;
    print "Need to compile C program rpt3pgm.c but can't find it.  Aborting."
    exit 5
  else
    print "Compiling rpt3pgm.c..."
    print "cc -o rpt3pgm rpt3pgm.c"
    cc -o rpt3pgm rpt3pgm.c
    if [[ ! -x rpt3pgm ]] then;
      print "Compilation of rpt3pgm.c must have failed.  Aborting."
      exit 6
    fi
  fi
fi


# We're ready to rock.  Silently delete report files from previous runs.
rm -f $report1Name
rm -f $report2Name
rm -f $report3Name


# Create report1 showing the raw text from all the invoices for the given tax year.
# Separate the invoices from each other with a row of equal signs.
print Generating report1...
exec 4> $report1Name
echo "Raw text of all trip invoices for tax year $TaxYear        Report date: $todaysDate"              >&4
echo "================================================================================================" >&4
invoiceCount=0
for x in $tripInvoices
do
  # Extract the raw text from the PDF file.
  python <<EOF
# This Python program, adapted from https://automatetheboringstuff.com/chapter13,
# extracts the text from the first page of a PDF file.
import sys
sys.path.append("$PyPDF2location")
import PyPDF2
reload(sys)
sys.setdefaultencoding('utf8')
pdfFileObj = open("$x", 'rb')
pdfReader = PyPDF2.PdfFileReader(pdfFileObj)
pdfReader.numPages
pageObj = pdfReader.getPage(0)
print pageObj.extractText()
EOF
  echo "================================================================================================"
  (( invoiceCount+=1 ))
  print -n "$invoiceCount ">$(tty)
done >&4
exec 4>&-  # Explicity close report1.
echo ' '


# Create report2, a CSV file with selected fields from the trip invoices.
./rpt2pgm $report1Name $report2Name
rc=$?
if ((rc!=0)) then;
  print "Error creating report2.  (RC:$rc)  Aborting."
  exit 7
fi

# Create a summary report (report3).
./rpt3pgm $TaxYear "'$todaysDate'" $report2Name $report3Name
rc=$?
if ((rc!=0)) then;
  print "Error creating report3.  (RC:$rc)  Aborting."
  exit 8
fi


# Display report3 on the screen.
cat $report3Name


exit 0
